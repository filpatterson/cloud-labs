we can start flask servers from cmd
we can specify port and app to start(??)  'flask run -p=50010'

we need to specify 'flask run --host=0.0.0.0' to make it visible for LAN
we need to specify what app to start, for us right when launching:
    set FLASK_APP=Main/hello.py & flask run


for now it looks like a valid windows command:
set FLASK_APP=Main/hello.py & flask run --host=0.0.0.0 -p 5001



to create venv:
python3 -m venv /path/to/new/virtual/environment

SO FAR for docker how-to this link was more useful than entire internet
https://blog.logrocket.com/build-deploy-flask-app-using-docker/

i do it having desktop docker launched opened in background to rebuild img
 docker image build -t mscebec/simplest_microservice .

to run
docker run -p 5000:5000 -d mscebec/simplest_microservice

docker stop [container id]   (where con. id is from docker ps)

==========
rancher can import docker images, this is exactly what i'd want.
https://docs.rancherdesktop.io/tutorials/working-with-images
building docker images was mentioned before, now this is how to run it w/ Rancher:

kubectl run --image mscebec/simplest_microservice mscebec/simplest_microservice_rancher
kubectl port-forward pods/mscebec/simplest_microservice_rancher 5000:5000

kubectl run --image simplest1-built-by-rancher simplest1-built-by-rancher
first arg is really an image source. second will be kube-name
for me it worked with name 'simplest1-built-by-rancher-secondattempt'

kubectl port-forward pods/simplest1-built-by-rancher-secondattempt 5000:5000
http://127.0.0.1:3000/

to see all running in kube:
kubectl get pods --all-namespaces

and it seems it only works on local ports

for more info about pods
kubectl get pod -o wide

Simply run “kubectl delete pod Nginx” to remove the pod you have made

for GOOGLE cloud, everything there seems manual, except enabling load balancing and ports:
kubectl expose deployment hello-server --type LoadBalancer --port 80 --target-port 8080

it seems it is possible to get docker image directly and deploy it: (guide)
https://cloud.google.com/kubernetes-engine/docs/deploy-app-cluster

# kubectl create deployment keras-app --image=stamatelou/keras-app
deployment.apps/keras-app created

# kubectl get deploy
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
keras-app   1/1     1            1           25s

To access the pod
kubectl expose deployment keras-app --port=80 --target-port=5000 --type=NodePort

OR

kubectl expose deployment keras-app --port=80 --target-port=5000 --type=LoadBalancer
THIS ONE WORKED TO EXPOSE

kubectl get service credit-worthiness-without-ml
TO GET IP ADDRESS